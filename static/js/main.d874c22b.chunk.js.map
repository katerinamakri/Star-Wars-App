{"version":3,"sources":["Dropdown.js","Search.js","ListView.js","Movie.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleDropdown","state","isDropdownOpen","setState","_this2","react_default","a","createElement","className","onClick","style","display","sortByEpisode","sortByYear","Component","Search","src_Dropdown","type","placeholder","value","query","onChange","event","searchingFor","target","ListView","filteredAndSortedMovieList","map","movie","index","key","movieSelection","fields","episode_id","title","release_date","Movie","selectedCard","length","undefined","selectedMovie","_this$props$selectedM","opening_crawl","director","App","fetchMovieData","fetch","method","headers","Content-Type","then","response","status","console","log","json","results","movieList","catch","error","alert","movie_index","term","toLowerCase","filtering","toConsumableArray","filter","includes","sortedByEpisode","sort","movie1","movie2","sortedByYear","Date","src_Search","src_ListView","src_Movie","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d874c22b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass Dropdown extends Component {\r\n\r\n\t constructor(props){\r\n\t\tsuper(props)\r\n\r\n\t\tthis.state = {\r\n\t\t\tisDropdownOpen: false\r\n\t\t}\r\n\t}\r\n\r\n\ttoggleDropdown = () => {\r\n\t\t\r\n\t\tif (this.state.isDropdownOpen){\r\n\t\t\tthis.setState({\r\n\t\t\t\tisDropdownOpen:false\r\n\t\t\t})\r\n\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisDropdownOpen:true\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet toggleDropdown = this.state.isDropdownOpen ? \"block\" : \"none\";\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"dropdown\" >\r\n\t\t\t\t<button onClick={() => this.toggleDropdown()}> Sort by... </button>\r\n\t\t\t\t<ul className=\"dropdown-content\" style={{ display: toggleDropdown }}>\r\n\t\t\t\t\t<div className=\"dropdown-paragraph-container\"> \r\n\t\t\t\t\t\t<p> Sort by </p>\r\n\t\t\t\t\t\t<button className='close-button' onClick={() => this.toggleDropdown()}> X </button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<li onClick={() => {this.props.sortByEpisode(); this.toggleDropdown()} }> Episode </li>\r\n\t\t\t\t\t<li onClick={() => {this.props.sortByYear(); this.toggleDropdown()} }> Year </li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\t\t\t\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Dropdown;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Dropdown from './Dropdown.js'\r\n\r\nclass Search extends Component {\r\n\r\n\trender() {\r\n\t\r\n\t\treturn (\r\n\t\t\t<div className=\"header-container\"> \r\n\t\t\t\t<Dropdown \r\n\t\t\t\t\tsortByEpisode={this.props.sortByEpisode}\r\n\t\t\t\t\tsortByYear={this.props.sortByYear}\t\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"search-movies-container\">\r\n\t\t\t\t\t<i className=\"fas fa-search\"></i>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\tclassName=\"search-input-movies\"\r\n\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\tplaceholder=\"Type to search...\"\r\n\t\t\t\t\t\tvalue={this.props.query}\r\n\t\t\t\t\t\tonChange={(event) => this.props.searchingFor(event.target.value)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass ListView extends Component {\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"list-container\">\r\n\t\t\t\t<ul className=\"list\" >\r\n\t\t\t\t\t{this.props.filteredAndSortedMovieList.map( (movie, index) => (\r\n\t\t\t\t\t\t<li key={index} onClick={() => this.props.movieSelection(index)}> \r\n\t\t\t\t\t\t\t<p> \r\n\t\t\t\t\t\t\t\t<span className='episode_id'>EPISODE {movie.fields.episode_id}</span>\r\n\t\t\t\t\t\t\t\t<span className='movie-title'>{movie.fields.title}</span>\r\n\t\t\t\t\t\t\t\t<span className='release_date'>{movie.fields.release_date}</span> \r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ListView;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass Movie extends Component {\r\n\trender(){\r\n\r\n\t\tif ( (this.props.query === '' && this.props.selectedCard.length === 0) || (this.props.selectedMovie.fields === undefined))  {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"movie-container\">\r\n\t\t\t\t\t<div className=\"paragraph-container\">\r\n\t\t\t\t\t\t<p>No movie selected</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t} else {\t\t\r\n\r\n\t\t\tconst { title, opening_crawl, director } = this.props.selectedMovie.fields;\r\n\t\t\t\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"movie-container\">\r\n\t\t\t\t\t\t<h2> {title} </h2>\r\n\t\t\t\t\t\t<p> {opening_crawl}</p>\r\n\t\t\t\t\t\t<p> Directed by: <span> {director} </span></p>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Search from './Search.js';\nimport ListView from './ListView.js';\nimport Movie from './Movie.js';\n\nclass App extends Component {\n\tconstructor(props){\n\t\tsuper(props)\n\n\t\tthis.state = {\n\t\t\tmovieList: [],\n\t\t\tselectedMovie:[],\n\t\t\tquery:'',\n\t\t\tfilteredAndSortedMovieList:[]\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tthis.fetchMovieData();\n\t}\n\n\tfetchMovieData = () => {\n\n\t\tlet apiUrl;\n\n\t\tapiUrl = 'https://star-wars-api.herokuapp.com/films'\n\n\t\tfetch(apiUrl, { \n\t\t\tmethod: 'GET', \n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\"\n\t\t\t} \n\t\t})\n\t\t.then((response) => {\n\n\t\t\tif (response.status === 404){\n\t\t\t\tconsole.log ('No data')\n\t\t\t} \n\t\t\treturn response.json();\n\t\t})\n\t\t.then((results) => {\n\t\t\t \n\t\t\tthis.setState({\n\t\t\t\tmovieList: results,\n\t\t\t\tfilteredAndSortedMovieList:results\n\t\t\t})\n\n\t\t})\n\t\t.catch((error) => {\n\t\t\t\t// Code for handling errors\n\t\t\t\tconsole.log(error)\n\t\t\t\talert(\"Sorry. There was an error retrieving the data. Please refer to the console for more information\")\n\t\t});    \n\t}\n\n\tmovieSelection = (movie_index) => {\n\t\tthis.setState({\n\t\t\tselectedMovie: this.state.movieList[movie_index]\n\t\t})\n\t}\n\n\tsearchingFor = (term) => {\n\t\tif (term) {\n\t\t\tterm = term.toLowerCase();  \n\t\t\t\n\t\t\tthis.setState ({\n\t\t\t\tquery:term\n\t\t\t})\n\n\t\t\tlet filtering = [...this.state.movieList].filter( \n\t\t\t\t(movie) => movie.fields.title.toLowerCase().includes(term)\n\t\t\t)\n\t\t\n\t\t\tthis.setState({\n\t\t\t\tfilteredAndSortedMovieList:filtering\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tthis.setState ({\n\t\t\t\tquery:'',\n\t\t\t\tfilteredAndSortedMovieList: this.state.movieList\n\t\t\t})\n\t\t}\n\t}\n\n\tsortByEpisode = () => {\n\n\t\tlet sortedByEpisode = [...this.state.movieList].sort((movie1,movie2) => movie1.fields.episode_id - movie2.fields.episode_id)\n\n\t\tthis.setState({\n\t\t\tfilteredAndSortedMovieList: sortedByEpisode\n\t\t}) \n\t}\n\n\tsortByYear = () => {\n\n\t\tlet sortedByYear = [...this.state.movieList].sort(\n\t\t\t(movie1,movie2) => {\n\t\t\t\tlet dateA= new Date(movie1.fields.release_date)\n\t\t\t\tlet dateB= new Date(movie2.fields.release_date)\n\t\t\t\treturn dateA - dateB\n\t\t\t}\n\t\t)\n\n\t\tthis.setState({\n\t\t\tfilteredAndSortedMovieList: sortedByYear\n\t\t}) \n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Search \n\t\t\t\t\tsortByEpisode={this.sortByEpisode}\n\t\t\t\t\tsortByYear={this.sortByYear}\n\t\t\t\t\tsearchingFor={this.searchingFor}\n\t\t\t\t/>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<ListView \n\t\t\t\t\t\tfilteredAndSortedMovieList={this.state.filteredAndSortedMovieList}\n\t\t\t\t\t\tmovieList={this.state.movieList} \n\t\t\t\t\t\tmovieSelection={this.movieSelection} \n\t\t\t\t\t/>\n\t\t\t\t\t<Movie \n\t\t\t\t\t\tselectedMovie={this.state.selectedMovie} \n\t\t\t\t\t/>\n\t\t\t\t</div>        \n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}